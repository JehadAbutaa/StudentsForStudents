@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - @Model.CurrentChat.ReceiverName</title>
    <style>
        body {
            font-family: 'Roboto', Arial, sans-serif;
            background-color: #f9f9fc;
            margin: 0;
            padding: 0;
        }

        .chat-container {
            width: 100%;
            max-width: 800px;
            margin: 50px auto;
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .chat-header {
            background-color: #6f42c1; /* Purple theme */
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
        }

        .chat-history {
            height: 400px;
            overflow-y: auto;
            padding: 20px;
            background-color: #f1f1f8;
        }

        .chat-message {
            display: flex;
            margin-bottom: 15px;
        }

        .message-sender {
            justify-content: flex-end; /* Align sender's messages to the right */
            text-align: right;
        }

        .message-receiver {
            justify-content: flex-start; /* Align receiver's messages to the left */
            text-align: left;
        }

        .message-sender .message-text {
            background-color: #d4edda; /* Light green for sender */
            color: #000;
            padding: 10px;
            border-radius: 10px;
            font-size: 14px;
            display: inline-block;
            max-width: 75%;
            text-align: left;
        }

        .message-receiver .message-text {
            background-color: #e9dcff; /* Light purple for receiver */
            color: #000;
            padding: 10px;
            border-radius: 10px;
            font-size: 14px;
            display: inline-block;
            max-width: 75%;
            text-align: left;
        }

        .message-time {
            font-size: 12px;
            color: #999;
            margin-top: 5px;
        }

        .chat-input {
            display: flex;
            padding: 15px;
            background-color: #fff;
            border-top: 1px solid #ddd;
        }

            .chat-input textarea {
                flex: 1;
                padding: 10px;
                font-size: 16px;
                border: 1px solid #ddd;
                border-radius: 10px;
                resize: none;
            }

            .chat-input button {
                background-color: #6f42c1;
                color: white;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                padding: 10px 20px;
                margin-left: 10px;
                cursor: pointer;
                font-weight: bold;
            }

                .chat-input button:hover {
                    background-color: #5a379f;
                }
    </style>
</head>
<body>
    <div class="chat-container">
        <!-- Chat Header -->
        <div class="chat-header">
            Chat with @Model.CurrentChat.ReceiverName
        </div>

        <!-- Chat History -->
        <div class="chat-history" id="chatHistory">
            @foreach (var message in Model.ChatHistory)
            {
                <div class="chat-message @(message.SenderID == Model.CurrentChat.SenderID ? "message-sender" : "message-receiver")">
                    <div class="message-text">@message.Message</div>
                    <div class="message-time">@message.DateTime.ToString("HH:mm")</div>
                </div>
            }
        </div>

        <!-- Chat Input -->
        <div class="chat-input">
            <textarea id="messageInput" placeholder="Type a message..." rows="3"></textarea>
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        // Function to send a message
        function sendMessage() {
            var message = document.getElementById("messageInput").value;
            if (message.trim() === "") return;

            var senderId = '@Model.CurrentChat.SenderID';
            var receiverId = '@Model.CurrentChat.ReceiverId';
            var receiverName = '@Model.CurrentChat.ReceiverName';

            // Simulate sending the message by adding it to the chat window
            const chatHistory = document.getElementById("chatHistory");

            var newMessage = `<div class="chat-message message-sender">
                                        <div class="message-text">${message}</div>
                                        <div class="message-time">${new Date().toLocaleTimeString()}</div>
                                    </div>`;

            chatHistory.innerHTML += newMessage;

            // Scroll to the bottom of the chat
            chatHistory.scrollTop = chatHistory.scrollHeight;

            // Clear the input field
            document.getElementById("messageInput").value = "";

            // Send the message to the server using AJAX
            fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    senderId: senderId,
                    receiverId: receiverId,
                    message: message
                })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Message sent:', data);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }
    </script>
</body>
</html>
