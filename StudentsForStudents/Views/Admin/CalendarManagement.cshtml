@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar Management</title>
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .calendar-container {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            background-color: #f9f9f9;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }

        #calendar {
            max-width: 100%;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div class="calendar-container">
        <h1>Calendar Management</h1>
        <div id="calendar"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                height: "auto",
                selectable: true,
                editable: true,
                events: function (fetchInfo, successCallback, failureCallback) {
                    // Fetch events from the backend
                    fetch('/Event/GetEvents')
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to fetch events');
                            }
                            return response.json();
                        })
                        .then(events => {
                            // Map the events to the FullCalendar format
                            const formattedEvents = events.map(event => ({
                                id: event.id,
                                title: event.title,
                                start: event.startDate,
                                // Ensure start date is in ISO format
                            }));
                            successCallback(formattedEvents); // Pass formatted events to FullCalendar
                        })
                        .catch(error => {
                            console.error('Error fetching events:', error);
                            failureCallback(error); // Handle error gracefully
                        });
                },
                dateClick: function (info) {
                    var title = prompt('Enter event title:');
                    if (title) {
                        var newEvent = {
                            title: title,
                            startDate: info.dateStr
                        };

                        fetch('/Event/AddEvent', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(newEvent)
                        })
                            .then(response => {
                                if (!response.ok) throw new Error('Failed to add event');
                                return response.json();
                            })
                            .then(data => {
                                calendar.addEvent({
                                    id: data.id,
                                    title: data.title,
                                    start: data.startDate
                                });
                                alert('Event added!');
                            })
                            .catch(error => console.error('Error adding event:', error));
                    }
                },
                eventClick: function (info) {
                    if (confirm(`Delete event '${info.event.title}'?`)) {
                        fetch(`/Event/DeleteEvent/${info.event.id}`, {
                            method: 'DELETE'
                        })
                            .then(() => {
                                info.event.remove();
                                alert('Event removed!');
                            })
                            .catch(error => console.error('Error deleting event:', error));
                    }
                },
                eventChange: function (info) {
                    var updatedEvent = {
                        id: info.event.id,
                        title: info.event.title,
                        startDate: info.event.start.toISOString()
                    };

                    fetch(`/Event/UpdateEvent/${info.event.id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(updatedEvent)
                    })
                        .then(() => {
                            alert('Event updated!');
                        })
                        .catch(error => console.error('Error updating event:', error));
                }
            });

            calendar.render();
        });

    
    </script>
</body>
</html>
